# This is a Terragrunt module generated by boilerplate.
terraform {
  source = "git::https://github.com/gruntwork-io/terraform-aws-ecs.git//.//modules/ecs-service?ref=v0.38.1"
}

include "root" {
  path = find_in_parent_folders()
}

dependency "ecs" {
  config_path = "../ecs"

  mock_outputs = {
    ecs_cluster_arn = "fake-ecs-cluster-arn"
  }
}

inputs = {
  # --------------------------------------------------------------------------------------------------------------------
  # Required input variables
  # --------------------------------------------------------------------------------------------------------------------

  # Description: The name of the service. This is used to namespace all resources created by this module.
  # Type: string
  service_name = "testservice"

  # Description: The Amazon Resource Name (ARN) of the ECS Cluster where this service should run.
  # Type: string
  ecs_cluster_arn = dependency.ecs.outputs.ecs_cluster_arn

  # Description: The JSON text of the ECS Task Container Definitions. This portion of the ECS Task Definition defines the Docker container(s) to be run along with all their properties. It should adhere to the format described at https://goo.gl/ob5U3g.
  # Type: string
  ecs_task_container_definitions = jsonencode([
    {
      name = "my-container"
      image = "nginx:latest"
      memory = 512
      cpu = 256
      essential = true
      portMappings = [
        {
          containerPort = 80
          hostPort      = 80
        }
      ]
      environment = [
        {
          name  = "test"
          value = "test-value"
        }
      ]
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          "awslogs-group"        = "/ecs/my-service" #creates
          "awslogs-region"       = "us-west-2"
          "awslogs-stream-prefix" = "ecs"
        }
      }
    }
  ])

  # Description: How many copies of the Task to run across the cluster.
  # Type: number
  desired_number_of_tasks = 1


  # --------------------------------------------------------------------------------------------------------------------
  # Optional input variables
  # Uncomment the ones you wish to set
  # --------------------------------------------------------------------------------------------------------------------

  # Description: If true, Terraform will wait for the service to reach a steady state — as in, the ECS tasks you wanted are actually deployed — before 'apply' is considered complete.
  # Type: bool
  # wait_for_steady_state = true

  # Description: Use this variable to adjust the default timeout of 20m for create and update operations the the ECS service. Adjusting the value can be particularly useful when using 'wait_for_steady_state'.
  # Type: string
  # service_create_update_timeout = "20m"

  # Description: The capacity provider strategy to use for the service. Note that the capacity providers have to be present on ECS cluster before deploying ECS service. When provided, var.launch_type is ignored.
  # Type: list
  # capacity_provider_strategy = []

  # Description: Specifies whether to enable Amazon ECS Exec for the tasks within the service.
  # Type: bool
  # enable_execute_command = false

  # Description: The launch type of the ECS service. Defaults to null, which will result in using the default capacity provider strategyfrom the ECS cluster. Valid value must be one of EC2 or FARGATE. When using FARGATE, you must set the network mode to awsvpc and configure it. When using EC2, you can configure the placement strategy using the variables ordered_placement_strategy, placement_constraint_type, placement_constraint_expression. This variable is ignored if var.capacity_provider_strategy is provided.
  # Type: string
  # launch_type = null

  # Description: Prefix for name of the IAM role used by the ECS task. If not provide, will be set to var.service_name.
  # Type: string
  # custom_iam_role_name_prefix = null

  # Description: Prefix for name of task execution IAM role and policy that grants access to CloudWatch and ECR. If not provide, will be set to var.service_name.
  # Type: string
  # custom_task_execution_name_prefix = null

  # Description: Custom name to use for the ECS service IAM role that is created. Note that this service IAM role is only needed when the ECS service is being used with an ELB. If blank (default), the name will be set to var.service_name.
  # Type: string
  # custom_ecs_service_role_name = null

  # Description: (Optional) A map of volume blocks that containers in your task may use. The key should be the name of the volume and the value should be a map compatible with https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html#volume-block-arguments, but not including the name parameter.
  # Type: any
  # volumes = {}

  # Description: (Optional) A map of EFS volumes that containers in your task may use. Each item in the list should be a map compatible with https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html#efs-volume-configuration-arguments.
  # Type: map
  # efs_volumes = {}

  # Description: A map of tags to apply to the ECS service. Each item in this list should be a map with the parameters key and value.
  # Type: map
  # service_tags = {}

  # Description: A map of tags to apply to the task definition. Each item in this list should be a map with the parameters key and value.
  # Type: map
  # task_definition_tags = {}

  # Description: A map of tags to apply to the elb target group. Each item in this list should be a map with the parameters key and value.
  # Type: map
  # lb_target_group_tags = {}

  # Description: The platform version on which to run your service. Only applicable for launch_type set to FARGATE. Defaults to LATEST.
  # Type: string
  # platform_version = null

  # Description: Whether tags should be propogated to the tasks from the service or from the task definition. Valid values are SERVICE and TASK_DEFINITION. Defaults to SERVICE. If set to null, no tags are created for tasks.
  # Type: string
  # propagate_tags = "SERVICE"

  # Description: A list of additional principals who can assume the task and task execution roles
  # Type: list
  # additional_task_assume_role_policy_principals = []

  # Description: The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host
  # Type: string
  # ecs_task_definition_network_mode = "bridge"

  # Description: The configuration to use when setting up the VPC network mode. Required and only used if ecs_task_definition_network_mode is awsvpc.
  # Type: object
  # ecs_service_network_configuration = null

  # Description: How many Tasks to run of the var.ecs_task_definition_canary to deploy for a canary deployment. Typically, only 0 or 1 should be used.
  # Type: number
  # desired_number_of_canary_tasks_to_run = 0

  # Description: The JSON text of the ECS Task Definition to be run for the canary. This defines the Docker container(s) to be run along with all their properties. It should adhere to the format described at https://goo.gl/ob5U3g.
  # Type: string
  # ecs_task_definition_canary = "[{ \"name\":\"not-used\" }]"

  # Description: Set this variable to 'true' to tell the ECS service to ignore var.desired_number_of_tasks and instead use auto scaling to determine how many Tasks of this service to run.
  # Type: bool
  # use_auto_scaling = false

  # Description: The minimum number of ECS Task instances of the ECS Service to run. Auto scaling will never scale in below this number. Must be set when var.use_auto_scaling is true.
  # Type: number
  # min_number_of_tasks = null

  # Description: The maximum number of ECS Task instances of the ECS Service to run. Auto scaling will never scale out above this number. Must be set when var.use_auto_scaling is true.
  # Type: number
  # max_number_of_tasks = null

  # Description: The upper limit, as a percentage of var.desired_number_of_tasks, of the number of running tasks that can be running in a service during a deployment. Setting this to more than 100 means that during deployment, ECS will deploy new instances of a Task before undeploying the old ones.
  # Type: number
  # deployment_maximum_percent = 200

  # Description: The lower limit, as a percentage of var.desired_number_of_tasks, of the number of running tasks that must remain running and healthy in a service during a deployment. Setting this to less than 100 means that during deployment, ECS may undeploy old instances of a Task before deploying new ones.
  # Type: number
  # deployment_minimum_healthy_percent = 100

  # Description: Type of deployment controller, possible values: CODE_DEPLOY, ECS, EXTERNAL
  # Type: string
  # deployment_controller = null

  # Description: Set enable to 'true' to prevent the task from attempting to continuously redeploy after a failed health check. Set rollback to 'true' to also automatically roll back to the last successful deployment. If this setting is used, both 'enable' and 'rollback' are required fields.
  # Type: object
  # deployment_circuit_breaker = null

  # Description: CloudWatch alarms which triggers deployment rollback if failure.
  # Type: object
  # deployment_cloudwatch_alarms = null

  # Description: Configuration block for the App Mesh proxy. The only supported value for `type` is "APPMESH". Use the name of the Envoy proxy container from `container_definitions` as the `container_name`. `properties` is a map of network configuration parameters to provide the Container Network Interface (CNI) plugin.
  # Type: object
  # proxy_configuration = null

  # Description: Set this variable to 'true' to setup service discovery for the ECS service by automatically registering the task IPs to a registry that is created within this module. Currently this is only supported with the 'awsvpc' networking mode.
  # Type: bool
  # use_service_discovery = false

  # Description: The id of the previously created namespace for service discovery. It will be used to form the service discovery address along with the discovery name in <discovery_name>.<namespace_name>. So if your discovery name is 'my-service' and your namespace name is 'my-company-staging.local', the hostname for the service will be 'my-service.my-company-staging.local'. Only used if var.use_service_discovery is true.
  # Type: string
  # discovery_namespace_id = null

  # Description: The name by which the service can be discovered. It will be used to form the service discovery address along with the namespace name in <discovery_name>.<namespace_name>. So if your discovery name is 'my-service' and your namespace name is 'my-company-staging.local', the hostname for the service will be 'my-service.my-company-staging.local'. Only used if var.use_service_discovery is true.
  # Type: string
  # discovery_name = null

  # Description: The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance. Maximum value of 10. Only used if var.use_service_discovery is true.
  # Type: number
  # discovery_custom_health_check_failure_threshold = 1

  # Description: The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set. Only used if var.use_service_discovery is true.
  # Type: number
  # discovery_dns_ttl = 60

  # Description: The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED. Only used if var.use_service_discovery is true.
  # Type: string
  # discovery_dns_routing_policy = "MULTIVALUE"

  # Description: Set this variable to 'true' when using public DNS namespaces. Only used if var.use_service_discovery is true.
  # Type: bool
  # discovery_use_public_dns = false

  # Description: The ID of the original Route 53 Hosted Zone where associated with the domain registrar. Only used if var.discovery_use_public_dns is true.
  # Type: string
  # discovery_original_public_route53_zone_id = null

  # Description: The ID of the new Route 53 Hosted Zone created for the public DNS namespace. Only used if var.discovery_use_public_dns is true.
  # Type: string
  # discovery_public_dns_namespace_route53_zone_id = null

  # Description: Check alias target health before routing to the service. Only used if var.discovery_use_public_dns is true.
  # Type: bool
  # discovery_alias_record_evaluate_target_health = true

  # Description: The type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries corresponded to service discovery requests.
  # Type: string
  # discovery_dns_record_type = "A"

  # Description: Container name value, already specified in the task definition, to be used for your service discovery service. Required when using `SRV` record type.
  # Type: string
  # discovery_container_name = null

  # Description: Port value, already specified in the task definition, to be used for your service discovery service. Required when using `SRV` record type.
  # Type: string
  # discovery_container_port = null

  # Description: The name of a Classic Load Balancer (CLB) to associate with this service. Containers in the service will automatically register with the CLB when booting up. Set to null if using ELBv2.
  # Type: string
  # clb_name = null

  # Description: The name of the container, as it appears in the var.task_arn Task definition, to associate with a CLB. Currently, ECS can only associate a CLB with a single container per service. Only used if clb_name is set.
  # Type: string
  # clb_container_name = null

  # Description: The port on the container in var.clb_container_name to associate with an CLB. Currently, ECS can only associate a CLB with a single container per service. Only used if clb_name is set.
  # Type: number
  # clb_container_port = null

  # Description: Configurations for ELB target groups for ALBs and NLBs that should be associated with the ECS Tasks. Each entry corresponds to a separate target group. Set to the empty object ({}) if you are not using an ALB or NLB.
  # Type: any
  # elb_target_groups = {}

  # Description: The ID of the VPC in which to create the target group. Only used if var.elb_target_group_name is set.
  # Type: string
  # elb_target_group_vpc_id = null

  # Description: The amount of time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. Only used if var.elb_target_group_name is set.
  # Type: number
  # elb_target_group_deregistration_delay = 300

  # Description: The amount time for targets to warm up before the load balancer sends them a full share of requests. The range is 30-900 seconds or 0 to disable. The default value is 0 seconds. Only used if var.elb_target_group_name is set.
  # Type: number
  # elb_slow_start = 0

  # Description: If true, the ALB will use use Sticky Sessions as described at https://goo.gl/VLcNbk. Only used if var.elb_target_group_name is set. Note that this can only be true when associating with an ALB. This cannot be used with CLBs or NLBs.
  # Type: bool
  # use_alb_sticky_sessions = false

  # Description: The type of Sticky Sessions to use. See https://goo.gl/MNwqNu for possible values. Only used if var.elb_target_group_name is set.
  # Type: string
  # alb_sticky_session_type = "lb_cookie"

  # Description: The time period, in seconds, during which requests from a client should be routed to the same Target. After this time period expires, the load balancer-generated cookie is considered stale. The acceptable range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds). Only used if var.elb_target_group_name is set.
  # Type: number
  # alb_sticky_session_cookie_duration = 86400

  # Description: The ARN of the policy that is used to set the permissions boundary for the IAM role for the ELB.
  # Type: string
  # elb_role_permissions_boundary_arn = null

  # Description: Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2,147,483,647. Only valid for services configured to use load balancers.
  # Type: number
  # health_check_grace_period_seconds = 0

  # Description: If true, enable health checks on the target group. Only applies to ELBv2. For CLBs, health checks are not configurable.
  # Type: bool
  # health_check_enabled = true

  # Description: The approximate amount of time, in seconds, between health checks of an individual Target. Minimum value 5 seconds, Maximum value 300 seconds.
  # Type: number
  # health_check_interval = 30

  # Description: The ping path that is the destination on the Targets for health checks. Required when using ALBs.
  # Type: string
  # health_check_path = "/"

  # Description: The port the ELB uses when performing health checks on Targets. The default is to use the port on which each target receives traffic from the load balancer, indicated by the value 'traffic-port'.
  # Type: string
  # health_check_port = "traffic-port"

  # Description: The amount of time, in seconds, during which no response from a Target means a failed health check. The acceptable range is 2 to 60 seconds.
  # Type: number
  # health_check_timeout = 5

  # Description: The number of consecutive successful health checks required before considering an unhealthy Target healthy. The acceptable range is 2 to 10.
  # Type: number
  # health_check_healthy_threshold = 5

  # Description: The number of consecutive failed health checks required before considering a target unhealthy. The acceptable range is 2 to 10. For NLBs, this value must be the same as the health_check_healthy_threshold.
  # Type: number
  # health_check_unhealthy_threshold = 2

  # Description: The HTTP codes to use when checking for a successful response from a Target. You can specify multiple values (e.g. '200,202') or a range of values (e.g. '200-299'). Required when using ALBs.
  # Type: string
  # health_check_matcher = "200"

  # Description: Define runtime platform options
  # Type: object
  # runtime_platform = null

  # Description: Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless force_new_deployment is enabled. The maximum number of ordered_placement_strategy blocks is 5.
  # Type: list
  # ordered_placement_strategy = [{"field":"cpu","type":"binpack"}]

  # Description: (variable placement_constraint_type did not define a description)
  # Type: string
  # placement_constraint_type = "memberOf"

  # Description: (variable placement_constraint_expression did not define a description)
  # Type: string
  # placement_constraint_expression = "attribute:ecs.ami-id != 'ami-fake'"

  # Description: The CPU units for the instances that Fargate will spin up. Options here: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html#fargate-tasks-size. Required when using FARGATE launch type.
  # Type: number
  # task_cpu = null

  # Description: The memory units for the instances that Fargate will spin up. Options here: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html#fargate-tasks-size. Required when using FARGATE launch type.
  # Type: number
  # task_memory = null

  # Description: Ephemeral storage size for Fargate tasks. See: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ephemeralStorage
  # Type: number
  # task_ephemeral_storage = null

  # Description: The ARN of the policy that is used to set the permissions boundary for the IAM role for the ECS task.
  # Type: string
  # task_role_permissions_boundary_arn = null

  # Description: The ARN of the policy that is used to set the permissions boundary for the IAM role for the ECS task execution.
  # Type: string
  # task_execution_role_permissions_boundary_arn = null

  # Description: The name of the existing task role to be used in place of creating a new role.
  # Type: (variable existing_ecs_task_role_name does not define a type)
  # existing_ecs_task_role_name = null

  # Description: The name of the existing task execution role to be used in place of creating a new role.
  # Type: (variable existing_ecs_task_execution_role_name does not define a type)
  # existing_ecs_task_execution_role_name = null

  # Description: Create a dependency between the resources in this module to the interpolated values in this list (and thus the source resources). In other words, the resources in this module will now depend on the resources backing the values in this list such that those resources need to be created before the resources in this module, and the resources in this module need to be destroyed before the resources in the list.
  # Type: list
  # dependencies = []

  # Description: Listener rules list required first to be provisioned before creation of ECS cluster.
  # Type: list
  # listener_rule_ids = []

  # Description: Whether or not to include check for ALB/NLB health checks. When set to true, no health check will be performed against the load balancer. This can be used to speed up deployments, but keep in mind that disabling health checks mean you won't have confirmed status of the service being operational. Defaults to false (health checks enabled).
  # Type: bool
  # skip_load_balancer_check_arg = false
}
