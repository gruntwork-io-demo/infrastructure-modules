# This is a Terragrunt module generated by boilerplate.
terraform {
  source = "git::https://github.com/gruntwork-io/terraform-aws-vpc.git//.//modules/vpc-app?ref=v0.26.24"
}

include "root" {
  path = find_in_parent_folders()
}

inputs = {
  # --------------------------------------------------------------------------------------------------------------------
  # Required input variables
  # --------------------------------------------------------------------------------------------------------------------

  # Description: Name of the VPC. Examples include 'prod', 'dev', 'mgmt', etc.
  # Type: string
  vpc_name = "clustervpctest" # TODO: fill in value

  # Description: The IP address range of the VPC in CIDR notation. A prefix of /16 is recommended. Do not use a prefix higher than /27. Examples include '10.100.0.0/16', '10.200.0.0/16', etc.
  # Type: string
  cidr_block = "10.100.0.0/16" # TODO: fill in value

  # Description: The number of NAT Gateways to launch for this VPC. For production VPCs, a NAT Gateway should be placed in each Availability Zone (so likely 3 total), whereas for non-prod VPCs, just one Availability Zone (and hence 1 NAT Gateway) will suffice.
  # Type: number
  num_nat_gateways = 1 # TODO: fill in value


  # --------------------------------------------------------------------------------------------------------------------
  # Optional input variables
  # Uncomment the ones you wish to set
  # --------------------------------------------------------------------------------------------------------------------

  # Description: How many AWS Availability Zones (AZs) to use. One subnet of each type (public, private app, private persistence) will be created in each AZ. All AZs will be used if you provide a value that is more than the number of AZs in a region. A value of null means all AZs should be used. For example, if you specify 3 in a region with 5 AZs, subnets will be created in just 3 AZs instead of all 5. On the other hand, if you specify 6 in the same region, all 5 AZs will be used with no duplicates (same as setting this to 5).
  # Type: number
  num_availability_zones = 1

  # Description: List of excluded Availability Zone names.
  # Type: list
  # availability_zone_exclude_names = []

  # Description: List of excluded Availability Zone IDs.
  # Type: list
  # availability_zone_exclude_ids = []

  # Description: Allows to filter list of Availability Zones based on their current state. Can be either "available", "information", "impaired" or "unavailable". By default the list includes a complete set of Availability Zones to which the underlying AWS account has access, regardless of their state.
  # Type: string
  # availability_zone_state = null

  # Description: List of specific Availability Zone IDs to use. If null (default), all availability zones in the configured AWS region will be used.
  # Type: list
  # availability_zone_ids = null

  # Description: Should the private persistence subnet be allowed outbound access to the internet?
  # Type: bool
  # allow_private_persistence_internet_access = false

  # Description: Should the transit subnet be allowed outbound access to the internet?
  # Type: bool
  # allow_transit_internet_access = false

  # Description: Set to true to use existing EIPs, passed in via var.custom_nat_eips, for the NAT gateway(s), instead of creating new ones.
  # Type: bool
  # use_custom_nat_eips = false

  # Description: The list of EIPs (allocation ids) to use for the NAT gateways. Their number has to match the one given in 'num_nat_gateways'. Must be set if var.use_custom_nat_eips us true.
  # Type: list
  # custom_nat_eips = []

  # Description: (Optional) A boolean flag to enable/disable DNS hostnames in the VPC. Defaults true.
  # Type: bool
  # enable_dns_hostnames = true

  # Description: (Optional) A boolean flag to enable/disable DNS support in the VPC. Defaults true.
  # Type: bool
  # enable_dns_support = true

  # Description: (Optional) A boolean flag to enable/disable a private NAT gateway. If this is set to true, it will disable public NAT gateways. Private NAT gateways are deployed into transit subnets and require setting 'var.create_transit_subnets = true'. Defaults false.
  # Type: bool
  # enable_private_nat = false

  # Description: (Optional) A boolean flag to enable/disable network address usage metrics in the VPC. Defaults false.
  # Type: bool
  # enable_network_address_usage_metrics = false

  # Description: (Optional) The length of the IPv4 CIDR netmask. Requires utilizing an ipv4_ipam_pool_id. Defaults to null.
  # Type: number
  # ipv4_netmask_length = null

  # Description: The host number in the IP address of the NAT Gateway. You would only use this if you want the NAT Gateway to always have the same host number within your subnet's CIDR range: e.g., it's always x.x.x.4. For IPv4, this is the fourth octet in the IP address.
  # Type: number
  # nat_private_ip_host_num = null

  # Description: (Optional) The number of secondary private IP addresses to assign to each NAT gateway. These IP addresses are used for source NAT (SNAT) for the instances in the private subnets. Defaults to 0.
  # Type: number
  # nat_secondary_private_ip_address_count = 0

  # Description: A map listing the specific CIDR blocks desired for each public subnet. The key must be in the form AZ-0, AZ-1, ... AZ-n where n is the number of Availability Zones. If left blank, we will compute a reasonable CIDR block for each subnet.
  # Type: map
  # public_subnet_cidr_blocks = {}

  # Description: (Optional) A map listing the specific IPv6 CIDR blocks desired for each public subnet. The key must be in the form AZ-0, AZ-1, ... AZ-n where n is the number of Availability Zones. If left blank, we will compute a reasonable CIDR block for each subnet.
  # Type: map
  # public_subnet_ipv6_cidr_blocks = {}

  # Description: The name of the public subnet tier. This is used to tag the subnet and its resources.
  # Type: string
  # public_subnet_name = "public"

  # Description: A map listing the specific CIDR blocks desired for each private-app subnet. The key must be in the form AZ-0, AZ-1, ... AZ-n where n is the number of Availability Zones. If left blank, we will compute a reasonable CIDR block for each subnet.
  # Type: map
  # private_app_subnet_cidr_blocks = {}

  # Description: The name of the private subnet tier. This is used to tag the subnet and its resources.
  # Type: string
  # private_subnet_name = "private-app"

  # Description: A map listing the specific CIDR blocks desired for each private-persistence subnet. The key must be in the form AZ-0, AZ-1, ... AZ-n where n is the number of Availability Zones. If left blank, we will compute a reasonable CIDR block for each subnet.
  # Type: map
  # private_persistence_subnet_cidr_blocks = {}

  # Description: The name of the private persistence subnet tier. This is used to tag the subnet and its resources.
  # Type: string
  # private_persistence_subnet_name = "private-persistence"

  # Description: A map listing the specific CIDR blocks desired for each transit subnet. The key must be in the form AZ-0, AZ-1, ... AZ-n where n is the number of Availability Zones. If left blank, we will compute a reasonable CIDR block for each subnet.
  # Type: map
  # transit_subnet_cidr_blocks = {}

  # Description: The name of the transit subnet tier. This is used to tag the subnet and its resources.
  # Type: string
  # transit_subnet_name = "transit"

  # Description: A list of Virtual Private Gateways that will propagate routes to public subnets. All routes from VPN connections that use Virtual Private Gateways listed here will appear in route tables of public subnets. If left empty, no routes will be propagated.
  # Type: list
  # public_propagating_vgws = []

  # Description: A list of Virtual Private Gateways that will propagate routes to private subnets. All routes from VPN connections that use Virtual Private Gateways listed here will appear in route tables of private subnets. If left empty, no routes will be propagated.
  # Type: list
  # private_propagating_vgws = []

  # Description: A list of Virtual Private Gateways that will propagate routes to persistence subnets. All routes from VPN connections that use Virtual Private Gateways listed here will appear in route tables of persistence subnets. If left empty, no routes will be propagated.
  # Type: list
  # persistence_propagating_vgws = []

  # Description: A list of Virtual Private Gateways that will propagate routes to transit subnets. All routes from VPN connections that use Virtual Private Gateways listed here will appear in route tables of transit subnets. If left empty, no routes will be propagated.
  # Type: list
  # transit_propagating_vgws = []

  # Description: The allowed tenancy of instances launched into the selected VPC. Must be one of: default, dedicated, or host.
  # Type: string
  # tenancy = "default"

  # Description: (Optional) IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length. If not provided, no IPv6 CIDR block will be allocated.
  # Type: string
  # ipv6_cidr_block = null

  # Description: (Optional) IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
  # Type: string
  # ipv6_ipam_pool_id = null

  # Description: Filters to select the IPv6 IPAM pool to use for allocated this VPCs
  # Type: list
  # ipv6_ipam_pool_filters = null

  # Description: (Optional) Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values: 56.
  # Type: number
  # ipv6_netmask_length = null

  # Description: (Optional) By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
  # Type: string
  # ipv6_cidr_block_network_border_group = null

  # Description: (Optional) Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Conflicts with ipv6_ipam_pool_id
  # Type: bool
  # assign_generated_ipv6_cidr_block = null

  # Description: (Optional) Enables IPv6 resources for the VPC. Defaults to false.
  # Type: bool
  # enable_ipv6 = false

  # Description: (Optional) Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. Default is false
  # Type: bool
  # assign_ipv6_address_on_creation = false

  # Description: (Optional) The number of additional bits to use in the VPC IPv6 CIDR block. The end result must be between a /56 netmask and /64 netmask. These bits are added to the VPC CIDR block bits. Example: /56 + 8 bits = /64 Defaults to 8 bits for a /64.
  # Type: number
  # ipv6_subnet_bits = 8

  # Description: A map of tags to apply to the VPC, Subnets, Route Tables, Internet Gateway, default security group, and default NACLs. The key is the tag name and the value is the tag value. Note that the tag 'Name' is automatically added by this module but may be optionally overwritten by this variable.
  # Type: map
  # custom_tags = {}

  # Description: A map of tags to apply just to the VPC itself, but not any of the other resources. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # vpc_custom_tags = {}

  # Description: A map of tags to apply to the public Subnet, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # public_subnet_custom_tags = {}

  # Description: A map of tags to apply to the private-app Subnet, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # private_app_subnet_custom_tags = {}

  # Description: A map of tags to apply to the private-persistence Subnet, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # private_persistence_subnet_custom_tags = {}

  # Description: A map of tags to apply to the transit Subnet, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # transit_subnet_custom_tags = {}

  # Description: A map of tags to apply to the NAT gateways, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # nat_gateway_custom_tags = {}

  # Description: A map of tags to apply to the default Security Group, on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # security_group_tags = {}

  # Description: The amount of spacing between the different subnet types when all subnets are present, such as the transit subnets.
  # Type: number
  # global_subnet_spacing = 6

  # Description: The amount of spacing between the different subnet types
  # Type: number
  # subnet_spacing = 10

  # Description: The amount of spacing between private app subnets.
  # Type: number
  # private_subnet_spacing = null

  # Description: The amount of spacing between the private persistence subnets.
  # Type: number
  # persistence_subnet_spacing = null

  # Description: The amount of spacing between the transit subnets.
  # Type: number
  # transit_subnet_spacing = null

  # Description: Takes the CIDR prefix and adds these many bits to it for calculating subnet ranges.  MAKE SURE if you change this you also change the CIDR spacing or you may hit errors.  See cidrsubnet interpolation in terraform config for more information.
  # Type: number
  # public_subnet_bits = 5

  # Description: Takes the CIDR prefix and adds these many bits to it for calculating subnet ranges.  MAKE SURE if you change this you also change the CIDR spacing or you may hit errors.  See cidrsubnet interpolation in terraform config for more information.
  # Type: number
  # private_subnet_bits = 5

  # Description: Takes the CIDR prefix and adds these many bits to it for calculating subnet ranges.  MAKE SURE if you change this you also change the CIDR spacing or you may hit errors.  See cidrsubnet interpolation in terraform config for more information.
  # Type: number
  # persistence_subnet_bits = 5

  # Description: Takes the CIDR prefix and adds these many bits to it for calculating subnet ranges.  MAKE SURE if you change this you also change the CIDR spacing or you may hit errors.  See cidrsubnet interpolation in terraform config for more information.
  # Type: number
  # transit_subnet_bits = 5

  # Description: Specify true to indicate that instances launched into the public subnet should be assigned a public IP address (versus a private IP address)
  # Type: bool
  # map_public_ip_on_launch = false

  # Description: If set to true, this module will create a default route table route to the Internet Gateway. If set to false, this module will NOT create a default route table route to the Internet Gateway. This is useful if you have subnets which utilize the default route table. Defaults to true.
  # Type: bool
  # create_default_route_table_route = true

  # Description: Create VPC endpoints for S3 and DynamoDB.
  # Type: bool
  # create_vpc_endpoints = true

  # Description: IAM policy to restrict what resources can call this endpoint. For example, you can add an IAM policy that allows EC2 instances to talk to this endpoint but no other types of resources. If not specified, all resources will be allowed to call this endpoint.
  # Type: string
  # s3_endpoint_policy = null

  # Description: IAM policy to restrict what resources can call this endpoint. For example, you can add an IAM policy that allows EC2 instances to talk to this endpoint but no other types of resources. If not specified, all resources will be allowed to call this endpoint.
  # Type: string
  # dynamodb_endpoint_policy = null

  # Description: If set to false, this module will NOT create the public subnet tier. This is useful for VPCs that only need private subnets. Note that setting this to false also means the module will NOT create an Internet Gateway or the NAT gateways, so if you want any public Internet access in the VPC (even outbound access—e.g., to run apt get), you'll need to provide it yourself via some other mechanism (e.g., via VPC peering, a Transit Gateway, Direct Connect, etc). Defaults to true.
  # Type: bool
  # create_public_subnets = true

  # Description: If the VPC will create an Internet Gateway. There are use cases when the VPC is desired to not be routable from the internet, and hence, they should not have an Internet Gateway. For example, when it is desired that public subnets exist but they are not directly public facing, since they can be routed from other VPC hosting the IGW.
  # Type: bool
  # create_igw = true

  # Description: If set to false, this module will NOT create the private app subnet tier.
  # Type: bool
  # create_private_app_subnets = true

  # Description: If set to false, this module will NOT create the private persistence subnet tier.
  # Type: bool
  # create_private_persistence_subnets = true

  # Description: If set to false, this module will NOT create the transit subnet tier.
  # Type: bool
  # create_transit_subnets = false

  # Description: If set to false, the default security groups will NOT be created. This variable is a workaround to a terraform limitation where overriding var.default_security_group_ingress_rules = {} and var.default_security_group_egress_rules = {} does not remove the rules. More information at: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group#removing-aws_default_security_group-from-your-configuration
  # Type: bool
  # enable_default_security_group = true

  # Description: The ingress rules to apply to the default security group in the VPC. This is the security group that is used by any resource that doesn't have its own security group attached. The value for this variable must be a map where the keys are a unique name for each rule and the values are objects with the same fields as the ingress block in the aws_default_security_group resource: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group#ingress-block.
  # Type: any
  # default_security_group_ingress_rules = {"AllowAllFromSelf":{"from_port":0,"protocol":"-1","self":true,"to_port":0}}

  # Description: The egress rules to apply to the default security group in the VPC. This is the security group that is used by any resource that doesn't have its own security group attached. The value for this variable must be a map where the keys are a unique name for each rule and the values are objects with the same fields as the egress block in the aws_default_security_group resource: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group#egress-block.
  # Type: any
  # default_security_group_egress_rules = {"AllowAllOutbound":{"cidr_blocks":["0.0.0.0/0"],"from_port":0,"ipv6_cidr_blocks":["::/0"],"protocol":"-1","to_port":0}}

  # Description: If true, will apply the default NACL rules in var.default_nacl_ingress_rules and var.default_nacl_egress_rules on the default NACL of the VPC. Note that every VPC must have a default NACL - when this is false, the original default NACL rules managed by AWS will be used.
  # Type: bool
  # apply_default_nacl_rules = false

  # Description: If true, will associate the default NACL to the public, private, and persistence subnets created by this module. Only used if var.apply_default_nacl_rules is true. Note that this does not guarantee that the subnets are associated with the default NACL. Subnets can only be associated with a single NACL. The default NACL association will be dropped if the subnets are associated with a custom NACL later.
  # Type: bool
  # associate_default_nacl_to_subnets = true

  # Description: The ingress rules to apply to the default NACL in the VPC. This is the NACL that is used by any subnet that doesn't have its own NACL attached. The value for this variable must be a map where the keys are a unique name for each rule and the values are objects with the same fields as the ingress block in the aws_default_network_acl resource: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl.
  # Type: any
  # default_nacl_ingress_rules = {"AllowAllIPv4":{"action":"allow","cidr_block":"0.0.0.0/0","from_port":0,"protocol":"-1","rule_no":100,"to_port":0},"AllowAllIPv6":{"action":"allow","from_port":0,"ipv6_cidr_block":"::/0","protocol":"-1","rule_no":101,"to_port":0}}

  # Description: The egress rules to apply to the default NACL in the VPC. This is the security group that is used by any subnet that doesn't have its own NACL attached. The value for this variable must be a map where the keys are a unique name for each rule and the values are objects with the same fields as the egress block in the aws_default_network_acl resource: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_network_acl.
  # Type: any
  # default_nacl_egress_rules = {"AllowAllIPv4":{"action":"allow","cidr_block":"0.0.0.0/0","from_port":0,"protocol":"-1","rule_no":100,"to_port":0},"AllowAllIPv6":{"action":"allow","from_port":0,"ipv6_cidr_block":"::/0","protocol":"-1","rule_no":101,"to_port":0}}

  # Description: If set to true, create one route table shared amongst all the public subnets; if set to false, create a separate route table per public subnet. Historically, we created one route table for all the public subnets, as they all routed through the Internet Gateway anyway, but in certain use cases (e.g., for use with Network Firewall), you may want to have separate route tables for each public subnet.
  # Type: bool
  # one_route_table_public_subnets = true

  # Description: The timeout for the creation of the Route Tables. It defines how long to wait for a route table to be created before considering the operation failed. Ref: https://www.terraform.io/language/resources/syntax#operation-timeouts
  # Type: string
  # route_table_creation_timeout = "5m"

  # Description: The timeout for the update of the Route Tables. It defines how long to wait for a route table to be updated before considering the operation failed. Ref: https://www.terraform.io/language/resources/syntax#operation-timeouts
  # Type: string
  # route_table_update_timeout = "2m"

  # Description: The timeout for the deletion of the Route Tables. It defines how long to wait for a route table to be deleted before considering the operation failed. Ref: https://www.terraform.io/language/resources/syntax#operation-timeouts
  # Type: string
  # route_table_deletion_timeout = "5m"

  # Description: A map of tags to apply to the public route table(s), on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # public_route_table_custom_tags = {}

  # Description: A map of tags to apply to the private-app route table(s), on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # private_app_route_table_custom_tags = {}

  # Description: A map of tags to apply to the private-persistence route tables(s), on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # private_persistence_route_table_custom_tags = {}

  # Description: A map of tags to apply to the transit route table(s), on top of the custom_tags. The key is the tag name and the value is the tag value. Note that tags defined here will override tags defined as custom_tags in case of conflict.
  # Type: map
  # transit_route_table_custom_tags = {}

  # Description: The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR.
  # Type: string
  # ipv4_ipam_pool_id = null

  # Description: Filters to select the IPv4 IPAM pool to use for allocated this VPCs
  # Type: list
  # ipv4_ipam_pool_filters = null

  # Description: A list of secondary CIDR blocks to associate with the VPC.
  # Type: set
  # secondary_cidr_blocks = []

  # Description: DEPRECATED. The AWS Region where this VPC will exist. This variable is no longer used and only kept around for backwards compatibility. We now automatically fetch the region using a data source.
  # Type: string
  # aws_region = ""
}
